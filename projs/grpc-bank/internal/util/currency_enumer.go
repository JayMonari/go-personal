// Code generated by "enumer -type=Currency -trimprefix=Currency -json -sql"; DO NOT EDIT.

package util

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _CurrencyName = "UnknownUSDEURCAD"

var _CurrencyIndex = [...]uint8{0, 7, 10, 13, 16}

const _CurrencyLowerName = "unknownusdeurcad"

func (i Currency) String() string {
	if i >= Currency(len(_CurrencyIndex)-1) {
		return fmt.Sprintf("Currency(%d)", i)
	}
	return _CurrencyName[_CurrencyIndex[i]:_CurrencyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CurrencyNoOp() {
	var x [1]struct{}
	_ = x[CurrencyUnknown-(0)]
	_ = x[CurrencyUSD-(1)]
	_ = x[CurrencyEUR-(2)]
	_ = x[CurrencyCAD-(3)]
}

var _CurrencyValues = []Currency{CurrencyUnknown, CurrencyUSD, CurrencyEUR, CurrencyCAD}

var _CurrencyNameToValueMap = map[string]Currency{
	_CurrencyName[0:7]:        CurrencyUnknown,
	_CurrencyLowerName[0:7]:   CurrencyUnknown,
	_CurrencyName[7:10]:       CurrencyUSD,
	_CurrencyLowerName[7:10]:  CurrencyUSD,
	_CurrencyName[10:13]:      CurrencyEUR,
	_CurrencyLowerName[10:13]: CurrencyEUR,
	_CurrencyName[13:16]:      CurrencyCAD,
	_CurrencyLowerName[13:16]: CurrencyCAD,
}

var _CurrencyNames = []string{
	_CurrencyName[0:7],
	_CurrencyName[7:10],
	_CurrencyName[10:13],
	_CurrencyName[13:16],
}

// CurrencyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CurrencyString(s string) (Currency, error) {
	if val, ok := _CurrencyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CurrencyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Currency values", s)
}

// CurrencyValues returns all values of the enum
func CurrencyValues() []Currency {
	return _CurrencyValues
}

// CurrencyStrings returns a slice of all String values of the enum
func CurrencyStrings() []string {
	strs := make([]string, len(_CurrencyNames))
	copy(strs, _CurrencyNames)
	return strs
}

// IsACurrency returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Currency) IsACurrency() bool {
	for _, v := range _CurrencyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Currency
func (i Currency) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Currency
func (i *Currency) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Currency should be a string, got %s", data)
	}

	var err error
	*i, err = CurrencyString(s)
	return err
}

func (i Currency) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Currency) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Currency: %[1]T(%[1]v)", value)
	}

	val, err := CurrencyString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
