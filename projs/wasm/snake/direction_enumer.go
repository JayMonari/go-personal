// Code generated by "enumer -type=Direction"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _DirectionName = "TopRightBottomLeft"

var _DirectionIndex = [...]uint8{0, 3, 8, 14, 18}

const _DirectionLowerName = "toprightbottomleft"

func (i Direction) String() string {
	i -= 1
	if i >= Direction(len(_DirectionIndex)-1) {
		return fmt.Sprintf("Direction(%d)", i+1)
	}
	return _DirectionName[_DirectionIndex[i]:_DirectionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DirectionNoOp() {
	var x [1]struct{}
	_ = x[Top-(1)]
	_ = x[Right-(2)]
	_ = x[Bottom-(3)]
	_ = x[Left-(4)]
}

var _DirectionValues = []Direction{Top, Right, Bottom, Left}

var _DirectionNameToValueMap = map[string]Direction{
	_DirectionName[0:3]:        Top,
	_DirectionLowerName[0:3]:   Top,
	_DirectionName[3:8]:        Right,
	_DirectionLowerName[3:8]:   Right,
	_DirectionName[8:14]:       Bottom,
	_DirectionLowerName[8:14]:  Bottom,
	_DirectionName[14:18]:      Left,
	_DirectionLowerName[14:18]: Left,
}

var _DirectionNames = []string{
	_DirectionName[0:3],
	_DirectionName[3:8],
	_DirectionName[8:14],
	_DirectionName[14:18],
}

// DirectionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DirectionString(s string) (Direction, error) {
	if val, ok := _DirectionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DirectionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Direction values", s)
}

// DirectionValues returns all values of the enum
func DirectionValues() []Direction {
	return _DirectionValues
}

// DirectionStrings returns a slice of all String values of the enum
func DirectionStrings() []string {
	strs := make([]string, len(_DirectionNames))
	copy(strs, _DirectionNames)
	return strs
}

// IsADirection returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Direction) IsADirection() bool {
	for _, v := range _DirectionValues {
		if i == v {
			return true
		}
	}
	return false
}
