// Code generated by "enumer -type=Day -trimprefix=Day -json -text -yaml -sql"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_DayName_0      = "SundayMonday"
	_DayLowerName_0 = "sundaymonday"
	_DayName_1      = "Tuesday"
	_DayLowerName_1 = "tuesday"
	_DayName_2      = "Wednesday"
	_DayLowerName_2 = "wednesday"
	_DayName_3      = "Thursday"
	_DayLowerName_3 = "thursday"
	_DayName_4      = "Friday"
	_DayLowerName_4 = "friday"
	_DayName_5      = "Saturday"
	_DayLowerName_5 = "saturday"
)

var (
	_DayIndex_0 = [...]uint8{0, 6, 12}
	_DayIndex_1 = [...]uint8{0, 7}
	_DayIndex_2 = [...]uint8{0, 9}
	_DayIndex_3 = [...]uint8{0, 8}
	_DayIndex_4 = [...]uint8{0, 6}
	_DayIndex_5 = [...]uint8{0, 8}
)

func (i Day) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _DayName_0[_DayIndex_0[i]:_DayIndex_0[i+1]]
	case i == 4:
		return _DayName_1
	case i == 8:
		return _DayName_2
	case i == 16:
		return _DayName_3
	case i == 32:
		return _DayName_4
	case i == 64:
		return _DayName_5
	default:
		return fmt.Sprintf("Day(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DayNoOp() {
	var x [1]struct{}
	_ = x[DaySunday-(1)]
	_ = x[DayMonday-(2)]
	_ = x[DayTuesday-(4)]
	_ = x[DayWednesday-(8)]
	_ = x[DayThursday-(16)]
	_ = x[DayFriday-(32)]
	_ = x[DaySaturday-(64)]
}

var _DayValues = []Day{DaySunday, DayMonday, DayTuesday, DayWednesday, DayThursday, DayFriday, DaySaturday}

var _DayNameToValueMap = map[string]Day{
	_DayName_0[0:6]:       DaySunday,
	_DayLowerName_0[0:6]:  DaySunday,
	_DayName_0[6:12]:      DayMonday,
	_DayLowerName_0[6:12]: DayMonday,
	_DayName_1[0:7]:       DayTuesday,
	_DayLowerName_1[0:7]:  DayTuesday,
	_DayName_2[0:9]:       DayWednesday,
	_DayLowerName_2[0:9]:  DayWednesday,
	_DayName_3[0:8]:       DayThursday,
	_DayLowerName_3[0:8]:  DayThursday,
	_DayName_4[0:6]:       DayFriday,
	_DayLowerName_4[0:6]:  DayFriday,
	_DayName_5[0:8]:       DaySaturday,
	_DayLowerName_5[0:8]:  DaySaturday,
}

var _DayNames = []string{
	_DayName_0[0:6],
	_DayName_0[6:12],
	_DayName_1[0:7],
	_DayName_2[0:9],
	_DayName_3[0:8],
	_DayName_4[0:6],
	_DayName_5[0:8],
}

// DayString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DayString(s string) (Day, error) {
	if val, ok := _DayNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DayNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Day values", s)
}

// DayValues returns all values of the enum
func DayValues() []Day {
	return _DayValues
}

// DayStrings returns a slice of all String values of the enum
func DayStrings() []string {
	strs := make([]string, len(_DayNames))
	copy(strs, _DayNames)
	return strs
}

// IsADay returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Day) IsADay() bool {
	for _, v := range _DayValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Day
func (i Day) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Day
func (i *Day) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Day should be a string, got %s", data)
	}

	var err error
	*i, err = DayString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Day
func (i Day) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Day
func (i *Day) UnmarshalText(text []byte) error {
	var err error
	*i, err = DayString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Day
func (i Day) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Day
func (i *Day) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DayString(s)
	return err
}

func (i Day) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Day) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Day: %[1]T(%[1]v)", value)
	}

	val, err := DayString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
